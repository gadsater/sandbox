(defun primep (number)
  (when (> number 1)
    (loop for fac from 2 to (isqrt number)
       never (zerop (mod number fac)))))

(defun next-prime (number)
  (loop for n from number when (prime-p n) return n))

(defun collect-primes (num-start num-end)
  (do ((n num-start (1+ n)) primes)
      ((> n num-end) (reverse primes))
    (when (primep n)
      (setf primes (cons n primes)))))
